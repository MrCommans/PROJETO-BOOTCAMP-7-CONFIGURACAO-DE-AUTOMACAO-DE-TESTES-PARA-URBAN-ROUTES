# Configura√ß√£o de Automa√ß√£o de Testes para Urban Routes - Sprint 7 TripleTen

## Vis√£o Geral

Este projeto foi desenvolvido como parte do **Sprint 7 do Bootcamp de An√°lise de QA da TripleTen**. O objetivo foi estabelecer a base para a automa√ß√£o de testes do aplicativo **Urban Routes** usando **Python** e **Pytest**, preparando a estrutura para a implementa√ß√£o de testes com **Selenium** no pr√≥ximo sprint. O projeto envolveu a cria√ß√£o de arquivos de suporte, configura√ß√£o de constantes, defini√ß√£o de fun√ß√µes de teste e verifica√ß√£o da conectividade com o servidor do aplicativo.

## Objetivos do Projeto

- **Configurar o ambiente de automa√ß√£o**: Criar um ambiente virtual e organizar a estrutura do reposit√≥rio com arquivos essenciais (`helpers.py`, `data.py`, `main.py`).
- **Adicionar c√≥digo auxiliar**: Incluir um arquivo `helpers.py` com fun√ß√µes predefinidas para suporte aos testes, sem modifica√ß√µes.
- **Definir constantes**: Armazenar dados de teste em `data.py` para facilitar a manuten√ß√£o futura.
- **Preparar fun√ß√µes de teste**: Criar fun√ß√µes vazias no `main.py` compat√≠veis com Pytest, prontas para receber c√≥digo Selenium no Sprint 8.
- **Verificar conectividade com o servidor**: Implementar uma verifica√ß√£o de disponibilidade do servidor Urban Routes.
- **Preparar l√≥gica inicial para automa√ß√£o**: Estruturar um ciclo para o teste de pedido de sorvetes, a ser completado no pr√≥ximo sprint.

## Metodologia

1. **Tarefa 1: Cria√ß√£o e Commit do Arquivo `helpers.py`**:
   - Criei o arquivo `helpers.py` e colei o c√≥digo auxiliar fornecido, sem modifica√ß√µes.
   - Realizei o commit e enviei as altera√ß√µes ao reposit√≥rio no GitHub.

2. **Tarefa 2: Adi√ß√£o de Constantes em `data.py`**:
   - Criei o arquivo `data.py` e adicionei a constante `URBAN_ROUTES_URL` com uma string vazia (`''`) para armazenar a URL do servidor.
   - Inclu√≠ as seguintes constantes com dados de teste:
     - `ADDRESS_FROM`: 'East 2nd Street, 601'
     - `ADDRESS_TO`: '1300 1st St'
     - `PHONE_NUMBER`: '+1 123 123 12 12'
     - `CARD_NUMBER`: '1234 5678 9100'
     - `CARD_CODE`: '1111'
     - `MESSAGE_FOR_DRIVER`: 'Pare no bar de sucos'

3. **Tarefa 3: Prepara√ß√£o do Arquivo `main.py`**:
   - Importei o m√≥dulo `data` no arquivo `main.py`.
   - Dentro da classe `TestUrbanRoutes`, defini 8 fun√ß√µes de teste com o prefixo `test_` para compatibilidade com Pytest:
     - `test_set_route`
     - `test_select_plan`
     - `test_fill_phone_number`
     - `test_fill_card`
     - `test_comment_for_driver`
     - `test_order_blanket_and_handkerchiefs`
     - `test_order_2_ice_creams`
     - `test_car_search_model_appears`
   - Cada fun√ß√£o incluiu o par√¢metro `self`, um coment√°rio `#Adicionar em S8`, uma instru√ß√£o `pass` e, opcionalmente, uma instru√ß√£o `print` para verifica√ß√£o (ex.: `print("fun√ß√£o criada para definir a rota")`).

4. **Tarefa 4: Verifica√ß√£o do Servidor**:
   - Importei o m√≥dulo `helpers` no `main.py`.
   - Adicionei o m√©todo especial `@classmethod def setup_class(cls)` na classe `TestUrbanRoutes`.
   - Implementei uma instru√ß√£o `if` chamando a fun√ß√£o `is_url_reachable` do `helpers.py`, passando `data.URBAN_ROUTES_URL` como par√¢metro.
   - Configurei mensagens de sa√≠da:
     - Sucesso: "Conectado ao servidor Urban Routes"
     - Falha: "N√£o foi poss√≠vel conectar ao Urban Routes. Verifique se o servidor est√° ligado e ainda em execu√ß√£o."

5. **Tarefa 5: Prepara√ß√£o do Teste de Pedido de Sorvetes**:
   - Na fun√ß√£o `test_order_2_ice_creams`, adicionei um ciclo `for` usando `range(2)` para iterar duas vezes.
   - Inclu√≠ um coment√°rio `#Adicionar em S8` e uma instru√ß√£o `pass` dentro do ciclo.

6. **Documenta√ß√£o e Envio**:
   - Adicionei coment√°rios apropriados nos arquivos para clareza e manuten√ß√£o.
   - Verifiquei que o c√≥digo executava sem erros antes do envio.
   - Enviei os arquivos ao reposit√≥rio no GitHub.

## Ferramentas Utilizadas

- **Python**: Para estrutura√ß√£o do c√≥digo de automa√ß√£o.
- **Pytest**: Framework de testes para compatibilidade das fun√ß√µes.
- **GitHub**: Para versionamento e armazenamento do reposit√≥rio.
- **Urban Routes**: Aplicativo refer√™ncia, com verifica√ß√£o de conectividade ao servidor.

## Estrutura do Reposit√≥rio

- `helpers.py`: Arquivo com c√≥digo auxiliar fornecido, sem modifica√ß√µes.
- `data.py`: Arquivo com constantes de dados de teste.
- `main.py`: Arquivo principal com a classe de testes e fun√ß√µes preparadas para automa√ß√£o.
- `README.md`: Este arquivo, descrevendo o projeto.

## Resultados

- Configurei com sucesso a estrutura inicial para automa√ß√£o de testes do Urban Routes, criando arquivos essenciais e organizando o reposit√≥rio.
- Defini constantes em `data.py` para facilitar a manuten√ß√£o de dados de teste.
- Preparei fun√ß√µes de teste em `main.py`, prontas para receber c√≥digo Selenium no Sprint 8.
- Implementei uma verifica√ß√£o de conectividade com o servidor, garantindo que os testes futuros sejam executados em um ambiente funcional.
- Estruturei a l√≥gica inicial para o teste de pedido de sorvetes, preparando o terreno para automa√ß√£o.

## Sobre Mim

Sou um profissional em transi√ß√£o de carreira para a √°rea de Qualidade de Software, com forma√ß√£o no **Bootcamp de An√°lise de QA da TripleTen**. Minha experi√™ncia pr√©via em ambientes din√¢micos me proporcionou habilidades como aten√ß√£o aos detalhes, organiza√ß√£o e colabora√ß√£o. Estou entusiasmado para aplicar meus conhecimentos em automa√ß√£o de testes e continuar evoluindo na √°rea de tecnologia.

## Contato

- üìç S√£o Paulo, Brasil
- üìß luis_commans@hotmail.com
- üîó https://www.linkedin.com/in/danilocommansqa
- üíª https://github.com/MrCommans

Obrigado por visitar meu reposit√≥rio! üöñ
